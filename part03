if it happens in production and this is exactly the advantage of distributed systems and containers so instead of relying on just one application pod and one database pot said we're we're replicating everything on multiple servers so we would have
another note were a replica or clone of our application would run which will also be connected to the service sir remember previously we said the service is like and persistent static ip address with the dns name so that you don't have to constantly adjust the point when
pod dies but surveys is also a load balancer which means that the service will actually catch the requests and forty two which ever parties list busy so it has both of these functionalities but in order to create the this second replica of the my application pod you wouldn't create a second part but instead you will
define a blueprint for my application pot and specify how many replicas of that pod you would like to run and that component or that blueprint is called deployment witches and other component of communities and in practice you would not be working with parts are you would not be creating pots you
would be creating deployments because they are you can specify how many replicas and you can also scale up or scaled down number of replicas of parts that you need so we've pod we said that parties a layer of abstraction on top of containers and deployment is another abstraction on top of
parts which makes it more convenient to interact with the pods replicate them and do some other configuration so in practice you would mostly work with deployments and not with pots so now if one of the replicas of your application pod would die the service will forward the requests to another one
on so your application would still be accessible for the user so now you're probably wondering what about the database pot because of the database pod died your application also wouldn't be accessible so we need em database replicase will however we can't replicate database using a deployment and the reason
for that is because database has state which is it's data meaning that if we have clothes a replica of the database they would all need to excess the same shared data storage and there you would need some kind of mechanism that manages which pods
are currently writing to that storage or which parts are reading from that storage in order to avoid data inconsistency says and that mechanism in addition to replicating feature is offered by another component is component called state full set so this company
and is meant specifically for applications like databases so my sequel monger to be elastic search or any other state for applications or databases should be created using state full sets and not deployments it's very important distinction and state for
said just like deployment would take care of replicating the pots and scaling them up or scaling them down but making sure the database reads and writes are synchronized so that
