of the container and the reason is because cuban eddie's wants to abstract away the container runtime would contain or technologies so that you can replace them if you want to and also because you don't have to directly ah work with docker or whatever container technology are use in a community
so you only interact with a community leader so we have an application part which is our own application and that will maybe use a database pod with it's own container and this is also an important concept here part is usually meant to run one application container inside of it you can run multiple
containers inside one pod but usually it's only the case if you have one main application container and the help her container or some side service that has to run inside of that pot and uses it is nothing special we just have one server and two containers running on it with the abstraction layer on top of it
so now let's see how they communicate with each other in communities world so communities offers out of the box of virtual network which means that each pod gets its own ip address not the container the pod gets the ip address and each pod can communicate with each other using that ip address which is an internal
ip address obviously it's not the public one so my application container can communicate with database using the ip address however paul components in company it is also an important concept or ephemeral which means that they can die very easily
and when that happens for example if i lose a database container because the container crash because the application crushed inside or because the notes the server that i'm running them on ah ran out resources the pod will die
and a new one will get created in it's place and when that happens it will get assigned a new ip address which obviously is inconvenient if you are communicating with the database using the ip address because you have to adjusted every time pod restarts and because of that another component of communities called service
this is used
so service is basically a static ip address or permanent ip address that can be attached soda say to each part so my app will have it's own service and database part will have it's own service and a good thing here is that the life cycles of service
and the pod are not connected so even if the pod dies the service and it's ip address will stay so you don't have to change that in points anymore
so now obviously you would want your application to be accessible through a browser right and for these you would have to create an external service so external services a service that opens the communication from external sources but obviously you wouldn't want your database to be open to the public requests
and for that you would create something called an internal service so this is a type of a service that you specify when creating one however if you notice the u r l of the external service is not very practical so basically what you have is ah in a should it be
